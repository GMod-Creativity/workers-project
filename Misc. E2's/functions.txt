@name Functions
@persist [Stack Local Call Return]:table F:string State

if(first())
{
    Call = table("main")
    runOnTick(1)
}

if(tickClk())
{
    while(maxquota() > 1000)
    {
        if(F == "main")
        {
            if(State == 0)
            {
                Local["Time", number] = curtime()
                Call = table("factorial", 15) #Get the factorial of 15, "15!"
            }
            elseif(State == 1)
            {
                print("Result of factorial : " + Local["Ret", table][1, number])
                Call = table("fibonacci", 16) #Get the fibonacci number of 16
            }
            elseif(State == 2)
            {
                Local["Time", number] = curtime() - Local["Time", number]
                print("Result of fibonacci : " + Local["Ret", table][1, number])
                print("Total execution time : " + round(Local["Time", number], 2) + " seconds")
                runOnTick(0), break
            }
        }
        elseif(F == "factorial") #Returns the factorial of Arg1
        {
            K = Local["Arg", table][1, number]
            if(K <= 1)
            {
                Return = table(1)
            }
            else
            {
                if(State == 0)
                {
                    Call = table("factorial", K - 1)
                }
                elseif(State == 1)
                {
                    Return = table(K * Local["Ret", table][1, number])
                }
            }
        }
        elseif(F == "fibonacci") #Returns the fibonacci's sequence number
        {
            K = Local["Arg", table][1, number]
            if(K < 2)
            {
                Return = table(K)
            }
            else
            {
                if(State == 0)
                {
                    Call = table("fibonacci", K - 1)
                }
                elseif(State == 1)
                {
                    Local["K1", number] = Local["Ret", table][1, number]
                    Call = table("fibonacci", K - 2)
                }
                elseif(State == 2)
                {
                    Return = table(Local["K1", number] + Local["Ret", table][1, number])
                }
            }
        }
        
        # Function processing #
        if(Call:count())
        {
            Context = table()
            Context["_name", string] = Call[1, string]
            Context["Arg", table] = Call:clone()
            Context["Arg", table]:removeString(1)
            Context["_state", number] = 0, State = 0
            Local = Context
            Stack:pushTable(Context)
            F = Call[1, string], Call = table()
        }
        elseif(Return:count())
        {
            Stack:popTable()
            Context = Stack[Stack:count(), table]
            F = Context["_name", string]
            Context["_state", number] = Context["_state", number] + 1
            Context["Ret", table] = Return:clone()
            State = Context["_state", number]
            Local = Context, Return = table()
        }
    }
}
