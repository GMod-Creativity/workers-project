@name Functions
@outputs [Stack Local Call Return]:table F:string State I

if(first())
{
    Call = table("main", 10000)
    runOnTick(1)
}

if(tickClk())
{
    while(perf())
    {
        if(F == "main")
        {
            if(State == 0)
            {
                Local["Time", number] = curtime() #We can have custom variables
                Local["Value", number] = Local["Args", table][1, number]
            }
            
            Call = table("DecrementVariable", Local["Value", number], 2)
            if(State % 2 == 1) #We store new result
            {
                Local["Value", number] = Local["Return", table][1, number]
            }
            
            #if(Local["Value", number] <= 0)
            #{
                #Local["Time", number] = curtime() - Local["Time", number]
                #print("Execution time : " + Local["Time", number])
                #runOnTick(0), break
            #}
            I = Local["Value", number]
        }
        elseif(F == "DecrementVariable") #Basically it's NewValue = DecrementVariable(Value, Count)
        {
            Return = table(Local["Args", table][1, number] - Local["Args", table][2, number])
        }
        
        if(Call:count())
        {
            Context = table()
            Context["_name", string] = Call[1, string]
            Context["Args", table] = Call:clone()
            Context["Args", table]:removeString(1)
            Context["_state", number] = 0, State = 0
            Local = Context
            Stack:pushTable(Context)
            F = Call[1, string], Call = table()
        }
        elseif(Return:count())
        {
            Stack:popTable()
            Context = Stack[Stack:count(), table]
            F = Context["_name", string]
            Context["_state", number] = Context["_state", number] + 1
            Context["Return", table] = Return:clone()
            State = Context["_state", number]
            Return = table()
        }
    }
}
