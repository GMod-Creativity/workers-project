@name Functions
@inputs RAM:wirelink
@outputs Reset
#Tokenizer-Parser-Compiler variables
@persist [Tk Vtk Expr Emit]:array TI Vars:table
#Temp variables
@persist StrI Tabs
#UDF Variables
@persist [Stack Local Call Return Arg Retd]:table F:string State

if(first()) { runOnChat(1) }
if(chatClk())
{
    hideChat(1)
    Str = owner():lastSaid()
    CodeString = ""
    I = 1, Tk:clear(), Vtk:clear(), Expr:clear(), Emit:clear(), TI = 1, Vars:clear()
    Stack:clear(), Call = table(), Return = table(), Stop = 0, F = ""
    while(Str[I] != "") #Tokenize
    {
        C = Str[I], I++
        if(C == "(") { Tk:pushString("lpr") }
        elseif(C == ")") { Tk:pushString("rpr") }
        elseif(C == "+") { Tk:pushString("add") }
        elseif(C == "-") { Tk:pushString("sub") }
        elseif(C == "*") { Tk:pushString("mul") }
        elseif(C == "/") { Tk:pushString("div") }
        elseif(C == ";") { Tk:pushString("eos") }
        elseif(C == " " | C == "\t" | C == "\n") { continue }
        elseif(inrange(toByte(C), 65, 90) | inrange(toByte(C), 97, 122))
        {
            TempStr = C
            C = Str[I], I++
            while(inrange(toByte(C), 65, 90) | inrange(toByte(C), 97, 122) | inrange(toByte(C), 48, 57) | C == "_")
            {
                TempStr += C
                C = Str[I], I++
            }, I--
            Tk:pushString("var")
            Vtk[Tk:count(), string] = TempStr
        }
        elseif(inrange(toByte(C), 48, 57))
        {
            TempStr = C
            C = Str[I], I++
            while(inrange(toByte(C), 48, 57) | C == ".")
            {
                TempStr += C
                C = Str[I], I++
            }, I--
            Tk:pushString("val")
            Vtk[Tk:count(), number] = TempStr:toNumber()
        }
    }
    TI = 1
    Call = table("main")
    runOnTick(1)
}

if(tickClk())
{
    Stop = 0
    while(maxquota() > 1000)
    {
        if(F == "main")
        {
            if(State == 0)
            {
                Local["Time", number] = curtime()
                TI = 1, Call = table("parse")
                #Let's give some variables
                Vars["curtime", number] = curtime()
                Vars["pi", number] = pi()
            }
            elseif(State == 1)
            {
                Call = table("compile", 1)
            }
            elseif(State == 2)
            {
                Local["Time", number] = curtime() - Local["Time", number]
                print("Writing compiled code... (" + Emit:count() + " bytes)")
                RAM:writeArray(0, Emit)
                Reset = 1, timer("Reset", 10)
                print("Done. Total execution time : " + round(Local["Time", number], 2) + " seconds")
                StrI = 0, Tabs = 0
                Stop = 1
            }
        }
        elseif(F == "parse")
        {
            if(State == 0)
            {
                Expr = array()
                Call = table("parse_expr")
            }
            else
            {
                if(Tk[TI, string] == "eos")
                {
                    TI++, Call = table("parse_expr")
                }
                else
                {
                    Return = table(1)
                }
            }
        }
        elseif(F == "parse_expr")
        {
            if(State == 0)
            {
                Expr:pushString("beg_expr")
                Call = table("parse_term")
            }
            else
            {
                if(Tk[TI, string] == "add" | Tk[TI, string] == "sub")
                {
                    Expr:pushString(Tk[TI, string]), TI++
                    Call = table("parse_term")
                }
                else
                {
                    Expr:pushString("end_expr")
                    Return = table(1)
                }
            }
            
        }
        elseif(F == "parse_term")
        {
            if(State == 0)
            {
                Expr:pushString("beg_term")
                Call = table("parse_factor")
            }
            else
            {
                if(Tk[TI, string] == "mul" | Tk[TI, string] == "div")
                {
                    Expr:pushString(Tk[TI, string]), TI++
                    Call = table("parse_factor")
                }
                else
                {
                    Expr:pushString("end_term")
                    Return = table(1)
                }
            }
        }
        elseif(F == "parse_factor")
        {
            if(State == 0)
            {
                Expr:pushString("beg_factor")
                Local["Token", string] = Tk[TI, string]
            }
            if(Local["Token", string] == "val")
            {
                Expr:pushString(Tk[TI, string] + "_" + Vtk[TI, number])
                TI++, Return = table(1)
            }
            elseif(Local["Token", string] == "var")
            {
                Expr:pushString(Tk[TI, string] + "_" + Vtk[TI, string])
                TI++, Return = table(1)
            }
            elseif(Local["Token", string] == "lpr")
            {
                if(State == 0)
                {
                    Call = table("parse_expr"), TI++
                }
                elseif(State == 1)
                {
                    if(Tk[TI, string] == "rpr")
                    {
                        TI++, Return = table(1)
                    }
                    else
                    {
                        hint("Expected ')' after expression", 5), Stop = 1
                    }
                }
            }
            else
            {
                hint("Expected value, variable or expression", 5), Stop = 1
            }
            if(Return:count()) { Expr:pushString("end_factor") }
        }
        elseif(F == "compile")
        {
            if(State == 0)
            {
                Local["Port", number] = 1
                TI = 1
                Call = table(Expr[TI, string], Arg[1, number])
            }
            else
            {
                Emit:pushNumber(0x1C), Emit:pushNumber(Local["Port", number]), Emit:pushNumber(Arg[1, number])
                Local["Port", number] = Local["Port", number] + 1
                if(Expr[TI, string] == "beg_expr")
                {
                    Call = table("beg_expr", Arg[1, number])
                }
                else
                {
                    Emit:pushNumber(0x10), Emit:pushNumber(0), Emit:pushNumber(0)
                    Return = table(1)
                }
            }
        }
        elseif(F == "beg_expr")
        {
            if(State == 0)
            {
                TI++, Call = table("beg_term", Arg[1, number])
                Arg[1, number] = Arg[1, number] + 1
            }
            elseif(State == 1)
            {
                if(Expr[TI, string] == "add" | Expr[TI, string] == "sub")
                {
                    Local["Operand", number] = TI, TI++
                    Call = table("beg_term", Arg[1, number])
                }
                else
                {
                    TI++
                    Return = table(1)
                }
            }
            elseif(State == 2)
            {
                if(Expr[Local["Operand", number], string] == "add")
                {
                    Emit:pushNumber(0x03), Emit:pushNumber(Arg[1, number] - 1), Emit:pushNumber(Arg[1, number])
                }
                else
                {
                    Emit:pushNumber(0x04), Emit:pushNumber(Arg[1, number] - 1), Emit:pushNumber(Arg[1, number])
                }
                Local["_state", number] = 1, State = 1
            }
        }
        elseif(F == "beg_term")
        {
            if(State == 0)
            {
                TI++, Call = table("beg_factor", Arg[1, number])
                Arg[1, number] = Arg[1, number] + 1
            }
            elseif(State == 1)
            {
                if(Expr[TI, string] == "mul" | Expr[TI, string] == "div")
                {
                    Local["Operand", number] = TI, TI++
                    Call = table("beg_factor", Arg[1, number])
                }
                else
                {
                    TI++
                    Return = table(1)
                }
            }
            elseif(State == 2)
            {
                if(Expr[Local["Operand", number], string] == "mul")
                {
                    Emit:pushNumber(0x05), Emit:pushNumber(Arg[1, number] - 1), Emit:pushNumber(Arg[1, number])
                }
                else
                {
                    Emit:pushNumber(0x06), Emit:pushNumber(Arg[1, number] - 1), Emit:pushNumber(Arg[1, number])
                }
                Local["_state", number] = 1, State = 1
            }
        }
        elseif(F == "beg_factor")
        {
            if(State == 0)
            {
                TI++
                Local["Tk", string] = Expr[TI, string]
            }
            if(Local["Tk", string]:left(3) == "val")
            {
                Emit:pushNumber(0x01), Emit:pushNumber(Arg[1, number]), Emit:pushNumber(Expr[TI, string]:sub(5):toNumber())
                TI += 2
                Return = table(1)
            }
            elseif(Local["Tk", string]:left(3) == "var")
            {
                Emit:pushNumber(0x01), Emit:pushNumber(Arg[1, number]), Emit:pushNumber(Vars[Expr[TI, string]:sub(5), number])
                TI += 2
                Return = table(1)
            }
            elseif(Local["Tk", string]:left(8) == "beg_expr")
            {
                if(State == 0)
                {
                    Call = table("beg_expr", Arg[1, number])
                }
                elseif(State == 1)
                {
                    TI++
                    Return = table(1)
                }
            }
        }
        
        # Function processing #
        if(Call:count())
        {
            Context = table()
            Context["_name", string] = Call[1, string]
            Context["Arg", table] = Call:clone()
            Context["Arg", table]:removeString(1)
            Arg = Context["Arg", table]
            Context["_state", number] = 0, State = 0
            Local = Context, Stack:pushTable(Context)
            F = Call[1, string], Call = table()
        }
        elseif(Return:count())
        {
            Stack:popTable()
            Context = Stack[Stack:count(), table]
            F = Context["_name", string]
            Context["_state", number] = Context["_state", number] + 1
            Context["Ret", table] = Return:clone()
            Arg = Context["Arg", table]
            Retd = Context["Ret", table]
            State = Context["_state", number]
            Local = Context, Return = table()
        }
        elseif(Stop)
        {
            Stack:clear()
            runOnTick(0), break
        }
    }
}

if(clk("Reset"))
{
    Reset = 0
}

if(Stop == 2 | clk("PrintTree")) #Set stop condition to 1 to print tree
{
    if(StrI == 0) { print("------------------------ TREE ------------------------"), StrI++ }
    while(perf())
    {
        V = Expr[StrI, string]
        Str = ""
        if(V:left(4) == "end_") { Tabs-- }
        for(I = 1, Tabs) { Str += "\t" }
        if(V:left(4) == "beg_") { Tabs++ }
        print(Str + V), StrI++
        if(StrI > Expr:count())
        {
            print("------------------------------------------------------")
            break
        }
    }
    if(StrI < Expr:count())
    {
        timer("PrintTree", 10)
    }
}